// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum;
        var boolean isNegative;
        let isNegative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
        let x = Math.abs(x);
        let y = Math.abs(y);
        let i = 0;
        let sum = 0;
        while (i < y) {
            let sum = sum + x;
            let i = i + 1;
        }
        if (isNegative) {
            return -sum;
        } else {
            return sum;
        }
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int i, sum;
        var boolean isNegative;
        let isNegative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
        let x = Math.abs(x);
        let y = Math.abs(y);
        let i = 0;
        let sum = 0;
        while ((sum < (x - y)) | (sum = (x - y))) {
            let sum = sum + y; // overflow is invalid
            let i = i + 1;
        }
        if (isNegative) {
            return -i;
        } else {
            return i;
        }
    }

    /** Returns the integer part of the square root of x. */
    // Attention overflow, 16 bit: -32768 ~ 32767, so x + 1 may overflow, 32767 + 1 = -32768
    // sum <= x, is better
    function int sqrt(int x) {
        var int i, sum;
        let i = 0;
        let sum = 0;
        while ((sum < (x - (i * 2) - 1)) | (sum = (x - (i * 2) - 1))) {
            let sum = sum + (i * 2) + 1; 
            let i = i + 1;
        }
        return i;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
