// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    /** The RAM array. */
    static Array ram;
    static Array freeList;
    static int freeListEnd;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freeList = 2048;
        let freeListEnd = 16384;
        let freeList[0] = freeListEnd; // end of free list
        let freeList[1] = freeListEnd - freeList - 2; // size of free list
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int p; // pointer to the current segment
        let p = freeList;
        // first possible segment
        while (p[1] < (size + 2)) {
            let p = p[0];
            // if p = end of free list, no suitable segment was found, but we currently not handling this case
        }
        // update current segment
        let p[1] = p[1] - size - 2;
        // update return segment
        let p[2 + p[1]] = freeListEnd;
        let p[2 + p[1] + 1] = size;
        return p + 2 + p[1] + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int p; // pointer to the current segment
        let p = freeList;
        // find the last segment
        while (~(p[0] = freeListEnd)) {
            let p = p[0];
        }
        // update last segment
        let p[0] = o - 2;
        let p = p[0];
        // update current segment
        let p[0] = freeListEnd;
        // we can also use o[-2] = freeListEnd, but it is wired
        return;
    }    
}
